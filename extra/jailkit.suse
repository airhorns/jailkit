#! /bin/sh
#
# init.d/jailkit
#
#   and symbolic its link
#
# /usr/sbin/rcjailkit
#
# System startup script for the inet daemon
#
### BEGIN INIT INFO
# Provides: jailkit
# Required-Start: $network 
# Required-Stop: $network
# X-UnitedLinux-Should-Start: jk_socketd
# Default-Start: 3 5
# Default-Stop: 0 1 2 6
# Description: Start the jk_socketd daemon.
### END INIT INFO

JAILKIT_BIN=/usr/sbin/jk_socketd
test -x $JAILKIT_BIN || exit 5

# Shell functions sourced from /etc/rc.status:
#      rc_check         check and set local and overall rc status
#      rc_status        check and set local and overall rc status
#      rc_status -v     ditto but be verbose in local rc status
#      rc_status -v -r  ditto and clear the local rc status
#      rc_failed        set local and overall rc status to failed
#      rc_reset         clear local rc status (overall remains)
#      rc_exit          exit appropriate to overall rc status
. /etc/rc.status

# First reset status of this service
rc_reset

# Return values acc. to LSB for all commands but status:
# 0 - success
# 1 - misc error
# 2 - invalid or excess args
# 3 - unimplemented feature (e.g. reload)
# 4 - insufficient privilege
# 5 - program not installed
# 6 - program not configured
#
# Note that starting an already running service, stopping
# or restarting a not-running service as well as the restart
# with force-reload (in case signalling is not supported) are
# considered a success.

case "$1" in
    start)
        echo -n "Starting JAILKIT services. (jk_socketd)"
        ## Start daemon with startproc(8). If this fails
        ## the echo return value is set appropriate.

        # startproc should return 0, even if service is
        # already running to match LSB spec.
        startproc $JAILKIT_BIN

        # Remember status and be verbose
        rc_status -v
        ;;
    stop)
        echo -n "Shutting down jk_socketd:"
        ## Stop daemon with killproc(8) and if this fails
        ## set echo the echo return value.

        killproc -QUIT $JAILKIT_BIN

        # Remember status and be verbose
        rc_status -v
        ;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    force-reload)
        ## Signal the daemon to reload its config. Most daemons
        ## do this on signal 1 (SIGHUP).
        ## If it does not support it, restart.

        echo -n "Reload service jk_socketd"
        ## if it supports it:
        killproc -HUP $JAILKIT_BIN
        rc_status -v
        ;;
    reload)
        ## Like force-reload, but if daemon does not support
        ## signalling, do nothing (!)

        # If it supports signalling:
        echo -n "Reload JAILKIT services (jk_socketd)."
        killproc -HUP  $JAILKIT_BIN
        rc_status -v
        ;;
    status)
        echo -n "Checking for service jk_socketd: "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

        # NOTE: checkproc returns LSB compliant status values.
        checkproc $JAILKIT_BIN
        rc_status -v
        ;;
    *)
        echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|
reload}"
        exit 1
esac
rc_exit